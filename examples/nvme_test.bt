#!/usr/bin/bpftrace

#ifndef BPFTRACE_HAVE_BTF
#include <linux/blkdev.h>
#include <linux/blk-mq.h>
#include <linux/nvme.h>
#include <linux/io_uring.h>
#include "drivers/nvme/host/nvme.h"
#endif /* BPFTRACE_HAVE_BTF */

/*
 * tracepoint:nvme:nvme_setup_cmd
 *     char disk[32]
 *     int ctrl_id
 *     int qid
 *     u8 opcode
 *     u8 flags
 *     u8 fctype
 *     u16 cid
 *     u32 nsid
 *     bool metadata
 *     u8 cdw10[24]
 * 
 * kfunc:nvme_setup_cmd
 *     struct nvme_ns * ns
 *     struct request * req
 *     blk_status_t retval
 * 
 * kprobe:nvme_setup_cmd
 *
 */

BEGIN
{
	@ioopcode[0x00] = "nvme_cmd_flush";
	$nvme_dev = "nvme0n1";
	printf("\n%s:\n", $nvme_dev);
	printf("max_hw_sectors_kb: ");
	cat("/sys/block/%s/queue/max_hw_sectors_kb", $nvme_dev);
	printf("\n");
        printf("Tracing NVMe... Hit Ctrl-C to end.\n");
}

kprobe:nvme_uring_cmd_io
{
        @c = count();
}

kprobe:nvme_setup_cmd
{
        $req = (struct request *)arg1;
        //$cmd = (struct nvme_command *)$req->cmd;
	//$opcode = $cmd->common.opcode & 0xff;
	//@timeout = $req->timeout;
	$nr_phys_segments = $req->nr_phys_segments;
	@segs = hist($nr_phys_segments);
	@lh_segs = lhist($nr_phys_segments, 0, 129, 1);
}

kprobe:blk_execute_rq_nowait
/comm == str($1)/
{
	/* bv_len */
        $bv_len = ((struct request *)arg0)->bio->bi_io_vec[0].bv_len;
	@lh_bv_len = lhist($bv_len/1024, 0, 100, 1);
        @h_bv_len = hist($bv_len);

	/* nr_phys_segments */
        $blk_nr_phys_segments = ((struct request *)arg0)->nr_phys_segments;
	@lh_blk_nr_phys_segments = lhist($blk_nr_phys_segments, 0, 129, 1);
        @h_blk_nr_phys_segments = hist($blk_nr_phys_segments);
	//$lh_blk_nr_phys_segments2 = lhist($blk_nr_phys_segments, 0, 129, 1);
}

kprobe:nvme_uring_cmd_io
{
	$issue_flags = arg3;
	@cmd_op = ((struct io_uring_cmd *)arg2)->cmd_op;
	@identified = ((struct nvme_ctrl *)arg0)->identified;
	//$comp_seen = arg0->comp_seen;
	@h_flags = hist($issue_flags);
	//$comp_seen = ((struct nvme_ctrl *)arg0)->comp_seen;
	//@h_lba_shift = hist($lba_shift);
}

tracepoint:nvme_pci_setup_prps
{
	@fx = count()
}

END
{
        printf("\n*******************************************************************************\n");
        printf("- kprobe:nvme_uring_cmd_io");
        printf("\n*******************************************************************************\n");
}
